// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Message.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_MESSAGE_MESSAGE_H_
#define _FAST_DDS_GENERATED_MESSAGE_MESSAGE_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MESSAGE_SOURCE)
#define MESSAGE_DllAPI __declspec( dllexport )
#else
#define MESSAGE_DllAPI __declspec( dllimport )
#endif // MESSAGE_SOURCE
#else
#define MESSAGE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MESSAGE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace Message {



/*!
 * @brief This class represents the structure Request defined by the user in the IDL file.
 * @ingroup Message
 */
class Request
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Request();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Request();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::Request that will be copied.
     */
    eProsima_user_DllExport Request(
            const Request& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::Request that will be copied.
     */
    eProsima_user_DllExport Request(
            Request&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::Request that will be copied.
     */
    eProsima_user_DllExport Request& operator =(
            const Request& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::Request that will be copied.
     */
    eProsima_user_DllExport Request& operator =(
            Request&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::Request object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Request& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::Request object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Request& x) const;

    /*!
     * @brief This function sets a value in member stamp
     * @param _stamp New value for member stamp
     */
    eProsima_user_DllExport void stamp(
            uint64_t _stamp);

    /*!
     * @brief This function returns the value of member stamp
     * @return Value of member stamp
     */
    eProsima_user_DllExport uint64_t stamp() const;

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport uint64_t& stamp();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::array<char, 50>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::array<char, 50>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::array<char, 50>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::array<char, 50>& data();

private:

    uint64_t m_stamp{0};
    std::array<char, 50> m_data{0};

};


/*!
 * @brief This class represents the structure Pointcloud1200x800x4 defined by the user in the IDL file.
 * @ingroup Message
 */
class Pointcloud1200x800x4
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Pointcloud1200x800x4();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Pointcloud1200x800x4();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::Pointcloud1200x800x4 that will be copied.
     */
    eProsima_user_DllExport Pointcloud1200x800x4(
            const Pointcloud1200x800x4& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::Pointcloud1200x800x4 that will be copied.
     */
    eProsima_user_DllExport Pointcloud1200x800x4(
            Pointcloud1200x800x4&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::Pointcloud1200x800x4 that will be copied.
     */
    eProsima_user_DllExport Pointcloud1200x800x4& operator =(
            const Pointcloud1200x800x4& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::Pointcloud1200x800x4 that will be copied.
     */
    eProsima_user_DllExport Pointcloud1200x800x4& operator =(
            Pointcloud1200x800x4&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::Pointcloud1200x800x4 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Pointcloud1200x800x4& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::Pointcloud1200x800x4 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Pointcloud1200x800x4& x) const;

    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::array<char, 50>& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::array<char, 50>&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::array<char, 50>& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::array<char, 50>& frame_id();


    /*!
     * @brief This function sets a value in member stamp
     * @param _stamp New value for member stamp
     */
    eProsima_user_DllExport void stamp(
            uint64_t _stamp);

    /*!
     * @brief This function returns the value of member stamp
     * @return Value of member stamp
     */
    eProsima_user_DllExport uint64_t stamp() const;

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport uint64_t& stamp();


    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            uint32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport uint32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport uint32_t& height();


    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            uint32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport uint32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport uint32_t& width();


    /*!
     * @brief This function sets a value in member channel
     * @param _channel New value for member channel
     */
    eProsima_user_DllExport void channel(
            uint32_t _channel);

    /*!
     * @brief This function returns the value of member channel
     * @return Value of member channel
     */
    eProsima_user_DllExport uint32_t channel() const;

    /*!
     * @brief This function returns a reference to member channel
     * @return Reference to member channel
     */
    eProsima_user_DllExport uint32_t& channel();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::array<float, 1200*800*4>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::array<float, 1200*800*4>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::array<float, 1200*800*4>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::array<float, 1200*800*4>& data();

private:

    std::array<char, 50> m_frame_id{0};
    uint64_t m_stamp{0};
    uint32_t m_height{0};
    uint32_t m_width{0};
    uint32_t m_channel{0};
    std::array<float, 1200*800*4> m_data{0.0};

};


/*!
 * @brief This class represents the structure Pointcloud640x480x3 defined by the user in the IDL file.
 * @ingroup Message
 */
class Pointcloud640x480x3
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Pointcloud640x480x3();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Pointcloud640x480x3();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::Pointcloud640x480x3 that will be copied.
     */
    eProsima_user_DllExport Pointcloud640x480x3(
            const Pointcloud640x480x3& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::Pointcloud640x480x3 that will be copied.
     */
    eProsima_user_DllExport Pointcloud640x480x3(
            Pointcloud640x480x3&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::Pointcloud640x480x3 that will be copied.
     */
    eProsima_user_DllExport Pointcloud640x480x3& operator =(
            const Pointcloud640x480x3& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::Pointcloud640x480x3 that will be copied.
     */
    eProsima_user_DllExport Pointcloud640x480x3& operator =(
            Pointcloud640x480x3&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::Pointcloud640x480x3 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Pointcloud640x480x3& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::Pointcloud640x480x3 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Pointcloud640x480x3& x) const;

    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::array<char, 50>& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::array<char, 50>&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::array<char, 50>& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::array<char, 50>& frame_id();


    /*!
     * @brief This function sets a value in member stamp
     * @param _stamp New value for member stamp
     */
    eProsima_user_DllExport void stamp(
            uint64_t _stamp);

    /*!
     * @brief This function returns the value of member stamp
     * @return Value of member stamp
     */
    eProsima_user_DllExport uint64_t stamp() const;

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport uint64_t& stamp();


    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            uint32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport uint32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport uint32_t& height();


    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            uint32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport uint32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport uint32_t& width();


    /*!
     * @brief This function sets a value in member channel
     * @param _channel New value for member channel
     */
    eProsima_user_DllExport void channel(
            uint32_t _channel);

    /*!
     * @brief This function returns the value of member channel
     * @return Value of member channel
     */
    eProsima_user_DllExport uint32_t channel() const;

    /*!
     * @brief This function returns a reference to member channel
     * @return Reference to member channel
     */
    eProsima_user_DllExport uint32_t& channel();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::array<float, 640*480*3>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::array<float, 640*480*3>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::array<float, 640*480*3>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::array<float, 640*480*3>& data();

private:

    std::array<char, 50> m_frame_id{0};
    uint64_t m_stamp{0};
    uint32_t m_height{0};
    uint32_t m_width{0};
    uint32_t m_channel{0};
    std::array<float, 640*480*3> m_data{0.0};

};


/*!
 * @brief This class represents the structure Pointcloud1920x1080x3 defined by the user in the IDL file.
 * @ingroup Message
 */
class Pointcloud1920x1080x3
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Pointcloud1920x1080x3();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Pointcloud1920x1080x3();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::Pointcloud1920x1080x3 that will be copied.
     */
    eProsima_user_DllExport Pointcloud1920x1080x3(
            const Pointcloud1920x1080x3& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::Pointcloud1920x1080x3 that will be copied.
     */
    eProsima_user_DllExport Pointcloud1920x1080x3(
            Pointcloud1920x1080x3&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::Pointcloud1920x1080x3 that will be copied.
     */
    eProsima_user_DllExport Pointcloud1920x1080x3& operator =(
            const Pointcloud1920x1080x3& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::Pointcloud1920x1080x3 that will be copied.
     */
    eProsima_user_DllExport Pointcloud1920x1080x3& operator =(
            Pointcloud1920x1080x3&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::Pointcloud1920x1080x3 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Pointcloud1920x1080x3& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::Pointcloud1920x1080x3 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Pointcloud1920x1080x3& x) const;

    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::array<char, 50>& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::array<char, 50>&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::array<char, 50>& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::array<char, 50>& frame_id();


    /*!
     * @brief This function sets a value in member stamp
     * @param _stamp New value for member stamp
     */
    eProsima_user_DllExport void stamp(
            uint64_t _stamp);

    /*!
     * @brief This function returns the value of member stamp
     * @return Value of member stamp
     */
    eProsima_user_DllExport uint64_t stamp() const;

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport uint64_t& stamp();


    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            uint32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport uint32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport uint32_t& height();


    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            uint32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport uint32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport uint32_t& width();


    /*!
     * @brief This function sets a value in member channel
     * @param _channel New value for member channel
     */
    eProsima_user_DllExport void channel(
            uint32_t _channel);

    /*!
     * @brief This function returns the value of member channel
     * @return Value of member channel
     */
    eProsima_user_DllExport uint32_t channel() const;

    /*!
     * @brief This function returns a reference to member channel
     * @return Reference to member channel
     */
    eProsima_user_DllExport uint32_t& channel();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::array<float, 1920*1080*3>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::array<float, 1920*1080*3>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::array<float, 1920*1080*3>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::array<float, 1920*1080*3>& data();

private:

    std::array<char, 50> m_frame_id{0};
    uint64_t m_stamp{0};
    uint32_t m_height{0};
    uint32_t m_width{0};
    uint32_t m_channel{0};
    std::array<float, 1920*1080*3> m_data{0.0};

};


/*!
 * @brief This class represents the structure Laserscan1500 defined by the user in the IDL file.
 * @ingroup Message
 */
class Laserscan1500
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Laserscan1500();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Laserscan1500();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::Laserscan1500 that will be copied.
     */
    eProsima_user_DllExport Laserscan1500(
            const Laserscan1500& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::Laserscan1500 that will be copied.
     */
    eProsima_user_DllExport Laserscan1500(
            Laserscan1500&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::Laserscan1500 that will be copied.
     */
    eProsima_user_DllExport Laserscan1500& operator =(
            const Laserscan1500& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::Laserscan1500 that will be copied.
     */
    eProsima_user_DllExport Laserscan1500& operator =(
            Laserscan1500&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::Laserscan1500 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Laserscan1500& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::Laserscan1500 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Laserscan1500& x) const;

    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::array<char, 50>& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::array<char, 50>&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::array<char, 50>& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::array<char, 50>& frame_id();


    /*!
     * @brief This function sets a value in member stamp
     * @param _stamp New value for member stamp
     */
    eProsima_user_DllExport void stamp(
            uint64_t _stamp);

    /*!
     * @brief This function returns the value of member stamp
     * @return Value of member stamp
     */
    eProsima_user_DllExport uint64_t stamp() const;

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport uint64_t& stamp();


    /*!
     * @brief This function sets a value in member range_min
     * @param _range_min New value for member range_min
     */
    eProsima_user_DllExport void range_min(
            float _range_min);

    /*!
     * @brief This function returns the value of member range_min
     * @return Value of member range_min
     */
    eProsima_user_DllExport float range_min() const;

    /*!
     * @brief This function returns a reference to member range_min
     * @return Reference to member range_min
     */
    eProsima_user_DllExport float& range_min();


    /*!
     * @brief This function sets a value in member range_max
     * @param _range_max New value for member range_max
     */
    eProsima_user_DllExport void range_max(
            float _range_max);

    /*!
     * @brief This function returns the value of member range_max
     * @return Value of member range_max
     */
    eProsima_user_DllExport float range_max() const;

    /*!
     * @brief This function returns a reference to member range_max
     * @return Reference to member range_max
     */
    eProsima_user_DllExport float& range_max();


    /*!
     * @brief This function sets a value in member angle_min
     * @param _angle_min New value for member angle_min
     */
    eProsima_user_DllExport void angle_min(
            float _angle_min);

    /*!
     * @brief This function returns the value of member angle_min
     * @return Value of member angle_min
     */
    eProsima_user_DllExport float angle_min() const;

    /*!
     * @brief This function returns a reference to member angle_min
     * @return Reference to member angle_min
     */
    eProsima_user_DllExport float& angle_min();


    /*!
     * @brief This function sets a value in member angle_max
     * @param _angle_max New value for member angle_max
     */
    eProsima_user_DllExport void angle_max(
            float _angle_max);

    /*!
     * @brief This function returns the value of member angle_max
     * @return Value of member angle_max
     */
    eProsima_user_DllExport float angle_max() const;

    /*!
     * @brief This function returns a reference to member angle_max
     * @return Reference to member angle_max
     */
    eProsima_user_DllExport float& angle_max();


    /*!
     * @brief This function sets a value in member angle_increment
     * @param _angle_increment New value for member angle_increment
     */
    eProsima_user_DllExport void angle_increment(
            float _angle_increment);

    /*!
     * @brief This function returns the value of member angle_increment
     * @return Value of member angle_increment
     */
    eProsima_user_DllExport float angle_increment() const;

    /*!
     * @brief This function returns a reference to member angle_increment
     * @return Reference to member angle_increment
     */
    eProsima_user_DllExport float& angle_increment();


    /*!
     * @brief This function sets a value in member ranges_size
     * @param _ranges_size New value for member ranges_size
     */
    eProsima_user_DllExport void ranges_size(
            uint32_t _ranges_size);

    /*!
     * @brief This function returns the value of member ranges_size
     * @return Value of member ranges_size
     */
    eProsima_user_DllExport uint32_t ranges_size() const;

    /*!
     * @brief This function returns a reference to member ranges_size
     * @return Reference to member ranges_size
     */
    eProsima_user_DllExport uint32_t& ranges_size();


    /*!
     * @brief This function copies the value in member ranges
     * @param _ranges New value to be copied in member ranges
     */
    eProsima_user_DllExport void ranges(
            const std::array<float, 1500>& _ranges);

    /*!
     * @brief This function moves the value in member ranges
     * @param _ranges New value to be moved in member ranges
     */
    eProsima_user_DllExport void ranges(
            std::array<float, 1500>&& _ranges);

    /*!
     * @brief This function returns a constant reference to member ranges
     * @return Constant reference to member ranges
     */
    eProsima_user_DllExport const std::array<float, 1500>& ranges() const;

    /*!
     * @brief This function returns a reference to member ranges
     * @return Reference to member ranges
     */
    eProsima_user_DllExport std::array<float, 1500>& ranges();


    /*!
     * @brief This function copies the value in member intensities
     * @param _intensities New value to be copied in member intensities
     */
    eProsima_user_DllExport void intensities(
            const std::array<float, 1500>& _intensities);

    /*!
     * @brief This function moves the value in member intensities
     * @param _intensities New value to be moved in member intensities
     */
    eProsima_user_DllExport void intensities(
            std::array<float, 1500>&& _intensities);

    /*!
     * @brief This function returns a constant reference to member intensities
     * @return Constant reference to member intensities
     */
    eProsima_user_DllExport const std::array<float, 1500>& intensities() const;

    /*!
     * @brief This function returns a reference to member intensities
     * @return Reference to member intensities
     */
    eProsima_user_DllExport std::array<float, 1500>& intensities();

private:

    std::array<char, 50> m_frame_id{0};
    uint64_t m_stamp{0};
    float m_range_min{0.0};
    float m_range_max{0.0};
    float m_angle_min{0.0};
    float m_angle_max{0.0};
    float m_angle_increment{0.0};
    uint32_t m_ranges_size{0};
    std::array<float, 1500> m_ranges{0.0};
    std::array<float, 1500> m_intensities{0.0};

};


/*!
 * @brief This class represents the structure Scalar defined by the user in the IDL file.
 * @ingroup Message
 */
class Scalar
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Scalar();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Scalar();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::Scalar that will be copied.
     */
    eProsima_user_DllExport Scalar(
            const Scalar& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::Scalar that will be copied.
     */
    eProsima_user_DllExport Scalar(
            Scalar&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::Scalar that will be copied.
     */
    eProsima_user_DllExport Scalar& operator =(
            const Scalar& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::Scalar that will be copied.
     */
    eProsima_user_DllExport Scalar& operator =(
            Scalar&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::Scalar object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Scalar& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::Scalar object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Scalar& x) const;

    /*!
     * @brief This function sets a value in member stamp
     * @param _stamp New value for member stamp
     */
    eProsima_user_DllExport void stamp(
            uint64_t _stamp);

    /*!
     * @brief This function returns the value of member stamp
     * @return Value of member stamp
     */
    eProsima_user_DllExport uint64_t stamp() const;

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport uint64_t& stamp();


    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::array<char, 50>& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::array<char, 50>&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::array<char, 50>& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::array<char, 50>& name();


    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            float _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport float value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport float& value();

private:

    uint64_t m_stamp{0};
    std::array<char, 50> m_name{0};
    float m_value{0.0};

};


/*!
 * @brief This class represents the structure ScalarList20 defined by the user in the IDL file.
 * @ingroup Message
 */
class ScalarList20
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ScalarList20();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ScalarList20();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::ScalarList20 that will be copied.
     */
    eProsima_user_DllExport ScalarList20(
            const ScalarList20& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::ScalarList20 that will be copied.
     */
    eProsima_user_DllExport ScalarList20(
            ScalarList20&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::ScalarList20 that will be copied.
     */
    eProsima_user_DllExport ScalarList20& operator =(
            const ScalarList20& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::ScalarList20 that will be copied.
     */
    eProsima_user_DllExport ScalarList20& operator =(
            ScalarList20&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::ScalarList20 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ScalarList20& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::ScalarList20 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ScalarList20& x) const;

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::array<Message::Scalar, 20>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::array<Message::Scalar, 20>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::array<Message::Scalar, 20>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::array<Message::Scalar, 20>& data();

private:

    std::array<Message::Scalar, 20> m_data;

};


/*!
 * @brief This class represents the structure HeaderString1024 defined by the user in the IDL file.
 * @ingroup Message
 */
class HeaderString1024
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport HeaderString1024();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~HeaderString1024();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::HeaderString1024 that will be copied.
     */
    eProsima_user_DllExport HeaderString1024(
            const HeaderString1024& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::HeaderString1024 that will be copied.
     */
    eProsima_user_DllExport HeaderString1024(
            HeaderString1024&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::HeaderString1024 that will be copied.
     */
    eProsima_user_DllExport HeaderString1024& operator =(
            const HeaderString1024& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::HeaderString1024 that will be copied.
     */
    eProsima_user_DllExport HeaderString1024& operator =(
            HeaderString1024&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::HeaderString1024 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const HeaderString1024& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::HeaderString1024 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const HeaderString1024& x) const;

    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::array<char, 50>& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::array<char, 50>&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::array<char, 50>& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::array<char, 50>& frame_id();


    /*!
     * @brief This function sets a value in member stamp
     * @param _stamp New value for member stamp
     */
    eProsima_user_DllExport void stamp(
            uint64_t _stamp);

    /*!
     * @brief This function returns the value of member stamp
     * @return Value of member stamp
     */
    eProsima_user_DllExport uint64_t stamp() const;

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport uint64_t& stamp();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::array<char, 1024>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::array<char, 1024>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::array<char, 1024>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::array<char, 1024>& data();


    /*!
     * @brief This function sets a value in member data_size
     * @param _data_size New value for member data_size
     */
    eProsima_user_DllExport void data_size(
            uint32_t _data_size);

    /*!
     * @brief This function returns the value of member data_size
     * @return Value of member data_size
     */
    eProsima_user_DllExport uint32_t data_size() const;

    /*!
     * @brief This function returns a reference to member data_size
     * @return Reference to member data_size
     */
    eProsima_user_DllExport uint32_t& data_size();

private:

    std::array<char, 50> m_frame_id{0};
    uint64_t m_stamp{0};
    std::array<char, 1024> m_data{0};
    uint32_t m_data_size{0};

};


/*!
 * @brief This class represents the structure HeaderString4096 defined by the user in the IDL file.
 * @ingroup Message
 */
class HeaderString4096
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport HeaderString4096();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~HeaderString4096();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::HeaderString4096 that will be copied.
     */
    eProsima_user_DllExport HeaderString4096(
            const HeaderString4096& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::HeaderString4096 that will be copied.
     */
    eProsima_user_DllExport HeaderString4096(
            HeaderString4096&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::HeaderString4096 that will be copied.
     */
    eProsima_user_DllExport HeaderString4096& operator =(
            const HeaderString4096& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::HeaderString4096 that will be copied.
     */
    eProsima_user_DllExport HeaderString4096& operator =(
            HeaderString4096&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::HeaderString4096 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const HeaderString4096& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::HeaderString4096 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const HeaderString4096& x) const;

    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::array<char, 50>& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::array<char, 50>&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::array<char, 50>& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::array<char, 50>& frame_id();


    /*!
     * @brief This function sets a value in member stamp
     * @param _stamp New value for member stamp
     */
    eProsima_user_DllExport void stamp(
            uint64_t _stamp);

    /*!
     * @brief This function returns the value of member stamp
     * @return Value of member stamp
     */
    eProsima_user_DllExport uint64_t stamp() const;

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport uint64_t& stamp();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::array<char, 4096>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::array<char, 4096>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::array<char, 4096>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::array<char, 4096>& data();


    /*!
     * @brief This function sets a value in member data_size
     * @param _data_size New value for member data_size
     */
    eProsima_user_DllExport void data_size(
            uint32_t _data_size);

    /*!
     * @brief This function returns the value of member data_size
     * @return Value of member data_size
     */
    eProsima_user_DllExport uint32_t data_size() const;

    /*!
     * @brief This function returns a reference to member data_size
     * @return Reference to member data_size
     */
    eProsima_user_DllExport uint32_t& data_size();

private:

    std::array<char, 50> m_frame_id{0};
    uint64_t m_stamp{0};
    std::array<char, 4096> m_data{0};
    uint32_t m_data_size{0};

};


/*!
 * @brief This class represents the structure PointD defined by the user in the IDL file.
 * @ingroup Message
 */
class PointD
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PointD();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PointD();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::PointD that will be copied.
     */
    eProsima_user_DllExport PointD(
            const PointD& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::PointD that will be copied.
     */
    eProsima_user_DllExport PointD(
            PointD&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::PointD that will be copied.
     */
    eProsima_user_DllExport PointD& operator =(
            const PointD& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::PointD that will be copied.
     */
    eProsima_user_DllExport PointD& operator =(
            PointD&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::PointD object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PointD& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::PointD object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PointD& x) const;

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            double _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport double x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport double& x();


    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            double _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport double y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport double& y();


    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    eProsima_user_DllExport void z(
            double _z);

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    eProsima_user_DllExport double z() const;

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    eProsima_user_DllExport double& z();

private:

    double m_x{0.0};
    double m_y{0.0};
    double m_z{0.0};

};


/*!
 * @brief This class represents the structure QuaternionD defined by the user in the IDL file.
 * @ingroup Message
 */
class QuaternionD
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport QuaternionD();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~QuaternionD();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::QuaternionD that will be copied.
     */
    eProsima_user_DllExport QuaternionD(
            const QuaternionD& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::QuaternionD that will be copied.
     */
    eProsima_user_DllExport QuaternionD(
            QuaternionD&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::QuaternionD that will be copied.
     */
    eProsima_user_DllExport QuaternionD& operator =(
            const QuaternionD& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::QuaternionD that will be copied.
     */
    eProsima_user_DllExport QuaternionD& operator =(
            QuaternionD&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::QuaternionD object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const QuaternionD& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::QuaternionD object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const QuaternionD& x) const;

    /*!
     * @brief This function sets a value in member w
     * @param _w New value for member w
     */
    eProsima_user_DllExport void w(
            double _w);

    /*!
     * @brief This function returns the value of member w
     * @return Value of member w
     */
    eProsima_user_DllExport double w() const;

    /*!
     * @brief This function returns a reference to member w
     * @return Reference to member w
     */
    eProsima_user_DllExport double& w();


    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            double _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport double x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport double& x();


    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            double _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport double y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport double& y();


    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    eProsima_user_DllExport void z(
            double _z);

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    eProsima_user_DllExport double z() const;

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    eProsima_user_DllExport double& z();

private:

    double m_w{0.0};
    double m_x{0.0};
    double m_y{0.0};
    double m_z{0.0};

};


/*!
 * @brief This class represents the structure PoseStamped defined by the user in the IDL file.
 * @ingroup Message
 */
class PoseStamped
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PoseStamped();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PoseStamped();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::PoseStamped that will be copied.
     */
    eProsima_user_DllExport PoseStamped(
            const PoseStamped& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::PoseStamped that will be copied.
     */
    eProsima_user_DllExport PoseStamped(
            PoseStamped&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::PoseStamped that will be copied.
     */
    eProsima_user_DllExport PoseStamped& operator =(
            const PoseStamped& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::PoseStamped that will be copied.
     */
    eProsima_user_DllExport PoseStamped& operator =(
            PoseStamped&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::PoseStamped object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PoseStamped& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::PoseStamped object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PoseStamped& x) const;

    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::array<char, 50>& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::array<char, 50>&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::array<char, 50>& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::array<char, 50>& frame_id();


    /*!
     * @brief This function copies the value in member position
     * @param _position New value to be copied in member position
     */
    eProsima_user_DllExport void position(
            const Message::PointD& _position);

    /*!
     * @brief This function moves the value in member position
     * @param _position New value to be moved in member position
     */
    eProsima_user_DllExport void position(
            Message::PointD&& _position);

    /*!
     * @brief This function returns a constant reference to member position
     * @return Constant reference to member position
     */
    eProsima_user_DllExport const Message::PointD& position() const;

    /*!
     * @brief This function returns a reference to member position
     * @return Reference to member position
     */
    eProsima_user_DllExport Message::PointD& position();


    /*!
     * @brief This function copies the value in member quaternion
     * @param _quaternion New value to be copied in member quaternion
     */
    eProsima_user_DllExport void quaternion(
            const Message::QuaternionD& _quaternion);

    /*!
     * @brief This function moves the value in member quaternion
     * @param _quaternion New value to be moved in member quaternion
     */
    eProsima_user_DllExport void quaternion(
            Message::QuaternionD&& _quaternion);

    /*!
     * @brief This function returns a constant reference to member quaternion
     * @return Constant reference to member quaternion
     */
    eProsima_user_DllExport const Message::QuaternionD& quaternion() const;

    /*!
     * @brief This function returns a reference to member quaternion
     * @return Reference to member quaternion
     */
    eProsima_user_DllExport Message::QuaternionD& quaternion();

private:

    std::array<char, 50> m_frame_id{0};
    Message::PointD m_position;
    Message::QuaternionD m_quaternion;

};


/*!
 * @brief This class represents the structure Path1024 defined by the user in the IDL file.
 * @ingroup Message
 */
class Path1024
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Path1024();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Path1024();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message::Path1024 that will be copied.
     */
    eProsima_user_DllExport Path1024(
            const Path1024& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message::Path1024 that will be copied.
     */
    eProsima_user_DllExport Path1024(
            Path1024&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message::Path1024 that will be copied.
     */
    eProsima_user_DllExport Path1024& operator =(
            const Path1024& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message::Path1024 that will be copied.
     */
    eProsima_user_DllExport Path1024& operator =(
            Path1024&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Message::Path1024 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Path1024& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Message::Path1024 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Path1024& x) const;

    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::array<char, 50>& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::array<char, 50>&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::array<char, 50>& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::array<char, 50>& frame_id();


    /*!
     * @brief This function sets a value in member stamp
     * @param _stamp New value for member stamp
     */
    eProsima_user_DllExport void stamp(
            uint64_t _stamp);

    /*!
     * @brief This function returns the value of member stamp
     * @return Value of member stamp
     */
    eProsima_user_DllExport uint64_t stamp() const;

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport uint64_t& stamp();


    /*!
     * @brief This function copies the value in member poses
     * @param _poses New value to be copied in member poses
     */
    eProsima_user_DllExport void poses(
            const std::array<Message::PoseStamped, 1024>& _poses);

    /*!
     * @brief This function moves the value in member poses
     * @param _poses New value to be moved in member poses
     */
    eProsima_user_DllExport void poses(
            std::array<Message::PoseStamped, 1024>&& _poses);

    /*!
     * @brief This function returns a constant reference to member poses
     * @return Constant reference to member poses
     */
    eProsima_user_DllExport const std::array<Message::PoseStamped, 1024>& poses() const;

    /*!
     * @brief This function returns a reference to member poses
     * @return Reference to member poses
     */
    eProsima_user_DllExport std::array<Message::PoseStamped, 1024>& poses();


    /*!
     * @brief This function sets a value in member poses_size
     * @param _poses_size New value for member poses_size
     */
    eProsima_user_DllExport void poses_size(
            uint32_t _poses_size);

    /*!
     * @brief This function returns the value of member poses_size
     * @return Value of member poses_size
     */
    eProsima_user_DllExport uint32_t poses_size() const;

    /*!
     * @brief This function returns a reference to member poses_size
     * @return Reference to member poses_size
     */
    eProsima_user_DllExport uint32_t& poses_size();

private:

    std::array<char, 50> m_frame_id{0};
    uint64_t m_stamp{0};
    std::array<Message::PoseStamped, 1024> m_poses;
    uint32_t m_poses_size{0};

};

} // namespace Message

#endif // _FAST_DDS_GENERATED_MESSAGE_MESSAGE_H_



