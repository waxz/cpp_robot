// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Message.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Message.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace Message {



Request::Request()
{
}

Request::~Request()
{
}

Request::Request(
        const Request& x)
{
    m_stamp = x.m_stamp;
    m_data = x.m_data;
}

Request::Request(
        Request&& x) noexcept
{
    m_stamp = x.m_stamp;
    m_data = std::move(x.m_data);
}

Request& Request::operator =(
        const Request& x)
{

    m_stamp = x.m_stamp;
    m_data = x.m_data;
    return *this;
}

Request& Request::operator =(
        Request&& x) noexcept
{

    m_stamp = x.m_stamp;
    m_data = std::move(x.m_data);
    return *this;
}

bool Request::operator ==(
        const Request& x) const
{
    return (m_stamp == x.m_stamp &&
           m_data == x.m_data);
}

bool Request::operator !=(
        const Request& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member stamp
 * @param _stamp New value for member stamp
 */
void Request::stamp(
        uint64_t _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function returns the value of member stamp
 * @return Value of member stamp
 */
uint64_t Request::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
uint64_t& Request::stamp()
{
    return m_stamp;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Request::data(
        const std::array<char, 50>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Request::data(
        std::array<char, 50>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<char, 50>& Request::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<char, 50>& Request::data()
{
    return m_data;
}




Pointcloud1200x800x4::Pointcloud1200x800x4()
{
}

Pointcloud1200x800x4::~Pointcloud1200x800x4()
{
}

Pointcloud1200x800x4::Pointcloud1200x800x4(
        const Pointcloud1200x800x4& x)
{
    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_height = x.m_height;
    m_width = x.m_width;
    m_channel = x.m_channel;
    m_data = x.m_data;
}

Pointcloud1200x800x4::Pointcloud1200x800x4(
        Pointcloud1200x800x4&& x) noexcept
{
    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_height = x.m_height;
    m_width = x.m_width;
    m_channel = x.m_channel;
    m_data = std::move(x.m_data);
}

Pointcloud1200x800x4& Pointcloud1200x800x4::operator =(
        const Pointcloud1200x800x4& x)
{

    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_height = x.m_height;
    m_width = x.m_width;
    m_channel = x.m_channel;
    m_data = x.m_data;
    return *this;
}

Pointcloud1200x800x4& Pointcloud1200x800x4::operator =(
        Pointcloud1200x800x4&& x) noexcept
{

    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_height = x.m_height;
    m_width = x.m_width;
    m_channel = x.m_channel;
    m_data = std::move(x.m_data);
    return *this;
}

bool Pointcloud1200x800x4::operator ==(
        const Pointcloud1200x800x4& x) const
{
    return (m_frame_id == x.m_frame_id &&
           m_stamp == x.m_stamp &&
           m_height == x.m_height &&
           m_width == x.m_width &&
           m_channel == x.m_channel &&
           m_data == x.m_data);
}

bool Pointcloud1200x800x4::operator !=(
        const Pointcloud1200x800x4& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void Pointcloud1200x800x4::frame_id(
        const std::array<char, 50>& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void Pointcloud1200x800x4::frame_id(
        std::array<char, 50>&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::array<char, 50>& Pointcloud1200x800x4::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::array<char, 50>& Pointcloud1200x800x4::frame_id()
{
    return m_frame_id;
}


/*!
 * @brief This function sets a value in member stamp
 * @param _stamp New value for member stamp
 */
void Pointcloud1200x800x4::stamp(
        uint64_t _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function returns the value of member stamp
 * @return Value of member stamp
 */
uint64_t Pointcloud1200x800x4::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
uint64_t& Pointcloud1200x800x4::stamp()
{
    return m_stamp;
}


/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void Pointcloud1200x800x4::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t Pointcloud1200x800x4::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& Pointcloud1200x800x4::height()
{
    return m_height;
}


/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void Pointcloud1200x800x4::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t Pointcloud1200x800x4::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& Pointcloud1200x800x4::width()
{
    return m_width;
}


/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void Pointcloud1200x800x4::channel(
        uint32_t _channel)
{
    m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
uint32_t Pointcloud1200x800x4::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
uint32_t& Pointcloud1200x800x4::channel()
{
    return m_channel;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Pointcloud1200x800x4::data(
        const std::array<float, 1200*800*4>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Pointcloud1200x800x4::data(
        std::array<float, 1200*800*4>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<float, 1200*800*4>& Pointcloud1200x800x4::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<float, 1200*800*4>& Pointcloud1200x800x4::data()
{
    return m_data;
}




Pointcloud640x480x3::Pointcloud640x480x3()
{
}

Pointcloud640x480x3::~Pointcloud640x480x3()
{
}

Pointcloud640x480x3::Pointcloud640x480x3(
        const Pointcloud640x480x3& x)
{
    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_height = x.m_height;
    m_width = x.m_width;
    m_channel = x.m_channel;
    m_data = x.m_data;
}

Pointcloud640x480x3::Pointcloud640x480x3(
        Pointcloud640x480x3&& x) noexcept
{
    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_height = x.m_height;
    m_width = x.m_width;
    m_channel = x.m_channel;
    m_data = std::move(x.m_data);
}

Pointcloud640x480x3& Pointcloud640x480x3::operator =(
        const Pointcloud640x480x3& x)
{

    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_height = x.m_height;
    m_width = x.m_width;
    m_channel = x.m_channel;
    m_data = x.m_data;
    return *this;
}

Pointcloud640x480x3& Pointcloud640x480x3::operator =(
        Pointcloud640x480x3&& x) noexcept
{

    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_height = x.m_height;
    m_width = x.m_width;
    m_channel = x.m_channel;
    m_data = std::move(x.m_data);
    return *this;
}

bool Pointcloud640x480x3::operator ==(
        const Pointcloud640x480x3& x) const
{
    return (m_frame_id == x.m_frame_id &&
           m_stamp == x.m_stamp &&
           m_height == x.m_height &&
           m_width == x.m_width &&
           m_channel == x.m_channel &&
           m_data == x.m_data);
}

bool Pointcloud640x480x3::operator !=(
        const Pointcloud640x480x3& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void Pointcloud640x480x3::frame_id(
        const std::array<char, 50>& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void Pointcloud640x480x3::frame_id(
        std::array<char, 50>&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::array<char, 50>& Pointcloud640x480x3::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::array<char, 50>& Pointcloud640x480x3::frame_id()
{
    return m_frame_id;
}


/*!
 * @brief This function sets a value in member stamp
 * @param _stamp New value for member stamp
 */
void Pointcloud640x480x3::stamp(
        uint64_t _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function returns the value of member stamp
 * @return Value of member stamp
 */
uint64_t Pointcloud640x480x3::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
uint64_t& Pointcloud640x480x3::stamp()
{
    return m_stamp;
}


/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void Pointcloud640x480x3::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t Pointcloud640x480x3::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& Pointcloud640x480x3::height()
{
    return m_height;
}


/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void Pointcloud640x480x3::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t Pointcloud640x480x3::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& Pointcloud640x480x3::width()
{
    return m_width;
}


/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void Pointcloud640x480x3::channel(
        uint32_t _channel)
{
    m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
uint32_t Pointcloud640x480x3::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
uint32_t& Pointcloud640x480x3::channel()
{
    return m_channel;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Pointcloud640x480x3::data(
        const std::array<float, 640*480*3>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Pointcloud640x480x3::data(
        std::array<float, 640*480*3>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<float, 640*480*3>& Pointcloud640x480x3::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<float, 640*480*3>& Pointcloud640x480x3::data()
{
    return m_data;
}




Pointcloud1920x1080x3::Pointcloud1920x1080x3()
{
}

Pointcloud1920x1080x3::~Pointcloud1920x1080x3()
{
}

Pointcloud1920x1080x3::Pointcloud1920x1080x3(
        const Pointcloud1920x1080x3& x)
{
    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_height = x.m_height;
    m_width = x.m_width;
    m_channel = x.m_channel;
    m_data = x.m_data;
}

Pointcloud1920x1080x3::Pointcloud1920x1080x3(
        Pointcloud1920x1080x3&& x) noexcept
{
    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_height = x.m_height;
    m_width = x.m_width;
    m_channel = x.m_channel;
    m_data = std::move(x.m_data);
}

Pointcloud1920x1080x3& Pointcloud1920x1080x3::operator =(
        const Pointcloud1920x1080x3& x)
{

    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_height = x.m_height;
    m_width = x.m_width;
    m_channel = x.m_channel;
    m_data = x.m_data;
    return *this;
}

Pointcloud1920x1080x3& Pointcloud1920x1080x3::operator =(
        Pointcloud1920x1080x3&& x) noexcept
{

    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_height = x.m_height;
    m_width = x.m_width;
    m_channel = x.m_channel;
    m_data = std::move(x.m_data);
    return *this;
}

bool Pointcloud1920x1080x3::operator ==(
        const Pointcloud1920x1080x3& x) const
{
    return (m_frame_id == x.m_frame_id &&
           m_stamp == x.m_stamp &&
           m_height == x.m_height &&
           m_width == x.m_width &&
           m_channel == x.m_channel &&
           m_data == x.m_data);
}

bool Pointcloud1920x1080x3::operator !=(
        const Pointcloud1920x1080x3& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void Pointcloud1920x1080x3::frame_id(
        const std::array<char, 50>& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void Pointcloud1920x1080x3::frame_id(
        std::array<char, 50>&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::array<char, 50>& Pointcloud1920x1080x3::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::array<char, 50>& Pointcloud1920x1080x3::frame_id()
{
    return m_frame_id;
}


/*!
 * @brief This function sets a value in member stamp
 * @param _stamp New value for member stamp
 */
void Pointcloud1920x1080x3::stamp(
        uint64_t _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function returns the value of member stamp
 * @return Value of member stamp
 */
uint64_t Pointcloud1920x1080x3::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
uint64_t& Pointcloud1920x1080x3::stamp()
{
    return m_stamp;
}


/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void Pointcloud1920x1080x3::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t Pointcloud1920x1080x3::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& Pointcloud1920x1080x3::height()
{
    return m_height;
}


/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void Pointcloud1920x1080x3::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t Pointcloud1920x1080x3::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& Pointcloud1920x1080x3::width()
{
    return m_width;
}


/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void Pointcloud1920x1080x3::channel(
        uint32_t _channel)
{
    m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
uint32_t Pointcloud1920x1080x3::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
uint32_t& Pointcloud1920x1080x3::channel()
{
    return m_channel;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Pointcloud1920x1080x3::data(
        const std::array<float, 1920*1080*3>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Pointcloud1920x1080x3::data(
        std::array<float, 1920*1080*3>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<float, 1920*1080*3>& Pointcloud1920x1080x3::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<float, 1920*1080*3>& Pointcloud1920x1080x3::data()
{
    return m_data;
}




Laserscan1500::Laserscan1500()
{
}

Laserscan1500::~Laserscan1500()
{
}

Laserscan1500::Laserscan1500(
        const Laserscan1500& x)
{
    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_range_min = x.m_range_min;
    m_range_max = x.m_range_max;
    m_angle_min = x.m_angle_min;
    m_angle_max = x.m_angle_max;
    m_angle_increment = x.m_angle_increment;
    m_ranges_size = x.m_ranges_size;
    m_ranges = x.m_ranges;
    m_intensities = x.m_intensities;
}

Laserscan1500::Laserscan1500(
        Laserscan1500&& x) noexcept
{
    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_range_min = x.m_range_min;
    m_range_max = x.m_range_max;
    m_angle_min = x.m_angle_min;
    m_angle_max = x.m_angle_max;
    m_angle_increment = x.m_angle_increment;
    m_ranges_size = x.m_ranges_size;
    m_ranges = std::move(x.m_ranges);
    m_intensities = std::move(x.m_intensities);
}

Laserscan1500& Laserscan1500::operator =(
        const Laserscan1500& x)
{

    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_range_min = x.m_range_min;
    m_range_max = x.m_range_max;
    m_angle_min = x.m_angle_min;
    m_angle_max = x.m_angle_max;
    m_angle_increment = x.m_angle_increment;
    m_ranges_size = x.m_ranges_size;
    m_ranges = x.m_ranges;
    m_intensities = x.m_intensities;
    return *this;
}

Laserscan1500& Laserscan1500::operator =(
        Laserscan1500&& x) noexcept
{

    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_range_min = x.m_range_min;
    m_range_max = x.m_range_max;
    m_angle_min = x.m_angle_min;
    m_angle_max = x.m_angle_max;
    m_angle_increment = x.m_angle_increment;
    m_ranges_size = x.m_ranges_size;
    m_ranges = std::move(x.m_ranges);
    m_intensities = std::move(x.m_intensities);
    return *this;
}

bool Laserscan1500::operator ==(
        const Laserscan1500& x) const
{
    return (m_frame_id == x.m_frame_id &&
           m_stamp == x.m_stamp &&
           m_range_min == x.m_range_min &&
           m_range_max == x.m_range_max &&
           m_angle_min == x.m_angle_min &&
           m_angle_max == x.m_angle_max &&
           m_angle_increment == x.m_angle_increment &&
           m_ranges_size == x.m_ranges_size &&
           m_ranges == x.m_ranges &&
           m_intensities == x.m_intensities);
}

bool Laserscan1500::operator !=(
        const Laserscan1500& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void Laserscan1500::frame_id(
        const std::array<char, 50>& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void Laserscan1500::frame_id(
        std::array<char, 50>&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::array<char, 50>& Laserscan1500::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::array<char, 50>& Laserscan1500::frame_id()
{
    return m_frame_id;
}


/*!
 * @brief This function sets a value in member stamp
 * @param _stamp New value for member stamp
 */
void Laserscan1500::stamp(
        uint64_t _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function returns the value of member stamp
 * @return Value of member stamp
 */
uint64_t Laserscan1500::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
uint64_t& Laserscan1500::stamp()
{
    return m_stamp;
}


/*!
 * @brief This function sets a value in member range_min
 * @param _range_min New value for member range_min
 */
void Laserscan1500::range_min(
        float _range_min)
{
    m_range_min = _range_min;
}

/*!
 * @brief This function returns the value of member range_min
 * @return Value of member range_min
 */
float Laserscan1500::range_min() const
{
    return m_range_min;
}

/*!
 * @brief This function returns a reference to member range_min
 * @return Reference to member range_min
 */
float& Laserscan1500::range_min()
{
    return m_range_min;
}


/*!
 * @brief This function sets a value in member range_max
 * @param _range_max New value for member range_max
 */
void Laserscan1500::range_max(
        float _range_max)
{
    m_range_max = _range_max;
}

/*!
 * @brief This function returns the value of member range_max
 * @return Value of member range_max
 */
float Laserscan1500::range_max() const
{
    return m_range_max;
}

/*!
 * @brief This function returns a reference to member range_max
 * @return Reference to member range_max
 */
float& Laserscan1500::range_max()
{
    return m_range_max;
}


/*!
 * @brief This function sets a value in member angle_min
 * @param _angle_min New value for member angle_min
 */
void Laserscan1500::angle_min(
        float _angle_min)
{
    m_angle_min = _angle_min;
}

/*!
 * @brief This function returns the value of member angle_min
 * @return Value of member angle_min
 */
float Laserscan1500::angle_min() const
{
    return m_angle_min;
}

/*!
 * @brief This function returns a reference to member angle_min
 * @return Reference to member angle_min
 */
float& Laserscan1500::angle_min()
{
    return m_angle_min;
}


/*!
 * @brief This function sets a value in member angle_max
 * @param _angle_max New value for member angle_max
 */
void Laserscan1500::angle_max(
        float _angle_max)
{
    m_angle_max = _angle_max;
}

/*!
 * @brief This function returns the value of member angle_max
 * @return Value of member angle_max
 */
float Laserscan1500::angle_max() const
{
    return m_angle_max;
}

/*!
 * @brief This function returns a reference to member angle_max
 * @return Reference to member angle_max
 */
float& Laserscan1500::angle_max()
{
    return m_angle_max;
}


/*!
 * @brief This function sets a value in member angle_increment
 * @param _angle_increment New value for member angle_increment
 */
void Laserscan1500::angle_increment(
        float _angle_increment)
{
    m_angle_increment = _angle_increment;
}

/*!
 * @brief This function returns the value of member angle_increment
 * @return Value of member angle_increment
 */
float Laserscan1500::angle_increment() const
{
    return m_angle_increment;
}

/*!
 * @brief This function returns a reference to member angle_increment
 * @return Reference to member angle_increment
 */
float& Laserscan1500::angle_increment()
{
    return m_angle_increment;
}


/*!
 * @brief This function sets a value in member ranges_size
 * @param _ranges_size New value for member ranges_size
 */
void Laserscan1500::ranges_size(
        uint32_t _ranges_size)
{
    m_ranges_size = _ranges_size;
}

/*!
 * @brief This function returns the value of member ranges_size
 * @return Value of member ranges_size
 */
uint32_t Laserscan1500::ranges_size() const
{
    return m_ranges_size;
}

/*!
 * @brief This function returns a reference to member ranges_size
 * @return Reference to member ranges_size
 */
uint32_t& Laserscan1500::ranges_size()
{
    return m_ranges_size;
}


/*!
 * @brief This function copies the value in member ranges
 * @param _ranges New value to be copied in member ranges
 */
void Laserscan1500::ranges(
        const std::array<float, 1500>& _ranges)
{
    m_ranges = _ranges;
}

/*!
 * @brief This function moves the value in member ranges
 * @param _ranges New value to be moved in member ranges
 */
void Laserscan1500::ranges(
        std::array<float, 1500>&& _ranges)
{
    m_ranges = std::move(_ranges);
}

/*!
 * @brief This function returns a constant reference to member ranges
 * @return Constant reference to member ranges
 */
const std::array<float, 1500>& Laserscan1500::ranges() const
{
    return m_ranges;
}

/*!
 * @brief This function returns a reference to member ranges
 * @return Reference to member ranges
 */
std::array<float, 1500>& Laserscan1500::ranges()
{
    return m_ranges;
}


/*!
 * @brief This function copies the value in member intensities
 * @param _intensities New value to be copied in member intensities
 */
void Laserscan1500::intensities(
        const std::array<float, 1500>& _intensities)
{
    m_intensities = _intensities;
}

/*!
 * @brief This function moves the value in member intensities
 * @param _intensities New value to be moved in member intensities
 */
void Laserscan1500::intensities(
        std::array<float, 1500>&& _intensities)
{
    m_intensities = std::move(_intensities);
}

/*!
 * @brief This function returns a constant reference to member intensities
 * @return Constant reference to member intensities
 */
const std::array<float, 1500>& Laserscan1500::intensities() const
{
    return m_intensities;
}

/*!
 * @brief This function returns a reference to member intensities
 * @return Reference to member intensities
 */
std::array<float, 1500>& Laserscan1500::intensities()
{
    return m_intensities;
}




Scalar::Scalar()
{
}

Scalar::~Scalar()
{
}

Scalar::Scalar(
        const Scalar& x)
{
    m_stamp = x.m_stamp;
    m_name = x.m_name;
    m_value = x.m_value;
}

Scalar::Scalar(
        Scalar&& x) noexcept
{
    m_stamp = x.m_stamp;
    m_name = std::move(x.m_name);
    m_value = x.m_value;
}

Scalar& Scalar::operator =(
        const Scalar& x)
{

    m_stamp = x.m_stamp;
    m_name = x.m_name;
    m_value = x.m_value;
    return *this;
}

Scalar& Scalar::operator =(
        Scalar&& x) noexcept
{

    m_stamp = x.m_stamp;
    m_name = std::move(x.m_name);
    m_value = x.m_value;
    return *this;
}

bool Scalar::operator ==(
        const Scalar& x) const
{
    return (m_stamp == x.m_stamp &&
           m_name == x.m_name &&
           m_value == x.m_value);
}

bool Scalar::operator !=(
        const Scalar& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member stamp
 * @param _stamp New value for member stamp
 */
void Scalar::stamp(
        uint64_t _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function returns the value of member stamp
 * @return Value of member stamp
 */
uint64_t Scalar::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
uint64_t& Scalar::stamp()
{
    return m_stamp;
}


/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void Scalar::name(
        const std::array<char, 50>& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void Scalar::name(
        std::array<char, 50>&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::array<char, 50>& Scalar::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::array<char, 50>& Scalar::name()
{
    return m_name;
}


/*!
 * @brief This function sets a value in member value
 * @param _value New value for member value
 */
void Scalar::value(
        float _value)
{
    m_value = _value;
}

/*!
 * @brief This function returns the value of member value
 * @return Value of member value
 */
float Scalar::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
float& Scalar::value()
{
    return m_value;
}




ScalarList20::ScalarList20()
{
}

ScalarList20::~ScalarList20()
{
}

ScalarList20::ScalarList20(
        const ScalarList20& x)
{
    m_data = x.m_data;
}

ScalarList20::ScalarList20(
        ScalarList20&& x) noexcept
{
    m_data = std::move(x.m_data);
}

ScalarList20& ScalarList20::operator =(
        const ScalarList20& x)
{

    m_data = x.m_data;
    return *this;
}

ScalarList20& ScalarList20::operator =(
        ScalarList20&& x) noexcept
{

    m_data = std::move(x.m_data);
    return *this;
}

bool ScalarList20::operator ==(
        const ScalarList20& x) const
{
    return (m_data == x.m_data);
}

bool ScalarList20::operator !=(
        const ScalarList20& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void ScalarList20::data(
        const std::array<Message::Scalar, 20>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void ScalarList20::data(
        std::array<Message::Scalar, 20>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<Message::Scalar, 20>& ScalarList20::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<Message::Scalar, 20>& ScalarList20::data()
{
    return m_data;
}




HeaderString1024::HeaderString1024()
{
}

HeaderString1024::~HeaderString1024()
{
}

HeaderString1024::HeaderString1024(
        const HeaderString1024& x)
{
    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_data = x.m_data;
    m_data_size = x.m_data_size;
}

HeaderString1024::HeaderString1024(
        HeaderString1024&& x) noexcept
{
    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_data = std::move(x.m_data);
    m_data_size = x.m_data_size;
}

HeaderString1024& HeaderString1024::operator =(
        const HeaderString1024& x)
{

    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_data = x.m_data;
    m_data_size = x.m_data_size;
    return *this;
}

HeaderString1024& HeaderString1024::operator =(
        HeaderString1024&& x) noexcept
{

    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_data = std::move(x.m_data);
    m_data_size = x.m_data_size;
    return *this;
}

bool HeaderString1024::operator ==(
        const HeaderString1024& x) const
{
    return (m_frame_id == x.m_frame_id &&
           m_stamp == x.m_stamp &&
           m_data == x.m_data &&
           m_data_size == x.m_data_size);
}

bool HeaderString1024::operator !=(
        const HeaderString1024& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void HeaderString1024::frame_id(
        const std::array<char, 50>& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void HeaderString1024::frame_id(
        std::array<char, 50>&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::array<char, 50>& HeaderString1024::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::array<char, 50>& HeaderString1024::frame_id()
{
    return m_frame_id;
}


/*!
 * @brief This function sets a value in member stamp
 * @param _stamp New value for member stamp
 */
void HeaderString1024::stamp(
        uint64_t _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function returns the value of member stamp
 * @return Value of member stamp
 */
uint64_t HeaderString1024::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
uint64_t& HeaderString1024::stamp()
{
    return m_stamp;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void HeaderString1024::data(
        const std::array<char, 1024>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void HeaderString1024::data(
        std::array<char, 1024>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<char, 1024>& HeaderString1024::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<char, 1024>& HeaderString1024::data()
{
    return m_data;
}


/*!
 * @brief This function sets a value in member data_size
 * @param _data_size New value for member data_size
 */
void HeaderString1024::data_size(
        uint32_t _data_size)
{
    m_data_size = _data_size;
}

/*!
 * @brief This function returns the value of member data_size
 * @return Value of member data_size
 */
uint32_t HeaderString1024::data_size() const
{
    return m_data_size;
}

/*!
 * @brief This function returns a reference to member data_size
 * @return Reference to member data_size
 */
uint32_t& HeaderString1024::data_size()
{
    return m_data_size;
}




HeaderString4096::HeaderString4096()
{
}

HeaderString4096::~HeaderString4096()
{
}

HeaderString4096::HeaderString4096(
        const HeaderString4096& x)
{
    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_data = x.m_data;
    m_data_size = x.m_data_size;
}

HeaderString4096::HeaderString4096(
        HeaderString4096&& x) noexcept
{
    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_data = std::move(x.m_data);
    m_data_size = x.m_data_size;
}

HeaderString4096& HeaderString4096::operator =(
        const HeaderString4096& x)
{

    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_data = x.m_data;
    m_data_size = x.m_data_size;
    return *this;
}

HeaderString4096& HeaderString4096::operator =(
        HeaderString4096&& x) noexcept
{

    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_data = std::move(x.m_data);
    m_data_size = x.m_data_size;
    return *this;
}

bool HeaderString4096::operator ==(
        const HeaderString4096& x) const
{
    return (m_frame_id == x.m_frame_id &&
           m_stamp == x.m_stamp &&
           m_data == x.m_data &&
           m_data_size == x.m_data_size);
}

bool HeaderString4096::operator !=(
        const HeaderString4096& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void HeaderString4096::frame_id(
        const std::array<char, 50>& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void HeaderString4096::frame_id(
        std::array<char, 50>&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::array<char, 50>& HeaderString4096::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::array<char, 50>& HeaderString4096::frame_id()
{
    return m_frame_id;
}


/*!
 * @brief This function sets a value in member stamp
 * @param _stamp New value for member stamp
 */
void HeaderString4096::stamp(
        uint64_t _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function returns the value of member stamp
 * @return Value of member stamp
 */
uint64_t HeaderString4096::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
uint64_t& HeaderString4096::stamp()
{
    return m_stamp;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void HeaderString4096::data(
        const std::array<char, 4096>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void HeaderString4096::data(
        std::array<char, 4096>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<char, 4096>& HeaderString4096::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<char, 4096>& HeaderString4096::data()
{
    return m_data;
}


/*!
 * @brief This function sets a value in member data_size
 * @param _data_size New value for member data_size
 */
void HeaderString4096::data_size(
        uint32_t _data_size)
{
    m_data_size = _data_size;
}

/*!
 * @brief This function returns the value of member data_size
 * @return Value of member data_size
 */
uint32_t HeaderString4096::data_size() const
{
    return m_data_size;
}

/*!
 * @brief This function returns a reference to member data_size
 * @return Reference to member data_size
 */
uint32_t& HeaderString4096::data_size()
{
    return m_data_size;
}




PointD::PointD()
{
}

PointD::~PointD()
{
}

PointD::PointD(
        const PointD& x)
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
}

PointD::PointD(
        PointD&& x) noexcept
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
}

PointD& PointD::operator =(
        const PointD& x)
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    return *this;
}

PointD& PointD::operator =(
        PointD&& x) noexcept
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    return *this;
}

bool PointD::operator ==(
        const PointD& x) const
{
    return (m_x == x.m_x &&
           m_y == x.m_y &&
           m_z == x.m_z);
}

bool PointD::operator !=(
        const PointD& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member x
 * @param _x New value for member x
 */
void PointD::x(
        double _x)
{
    m_x = _x;
}

/*!
 * @brief This function returns the value of member x
 * @return Value of member x
 */
double PointD::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
double& PointD::x()
{
    return m_x;
}


/*!
 * @brief This function sets a value in member y
 * @param _y New value for member y
 */
void PointD::y(
        double _y)
{
    m_y = _y;
}

/*!
 * @brief This function returns the value of member y
 * @return Value of member y
 */
double PointD::y() const
{
    return m_y;
}

/*!
 * @brief This function returns a reference to member y
 * @return Reference to member y
 */
double& PointD::y()
{
    return m_y;
}


/*!
 * @brief This function sets a value in member z
 * @param _z New value for member z
 */
void PointD::z(
        double _z)
{
    m_z = _z;
}

/*!
 * @brief This function returns the value of member z
 * @return Value of member z
 */
double PointD::z() const
{
    return m_z;
}

/*!
 * @brief This function returns a reference to member z
 * @return Reference to member z
 */
double& PointD::z()
{
    return m_z;
}




QuaternionD::QuaternionD()
{
}

QuaternionD::~QuaternionD()
{
}

QuaternionD::QuaternionD(
        const QuaternionD& x)
{
    m_w = x.m_w;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
}

QuaternionD::QuaternionD(
        QuaternionD&& x) noexcept
{
    m_w = x.m_w;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
}

QuaternionD& QuaternionD::operator =(
        const QuaternionD& x)
{

    m_w = x.m_w;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    return *this;
}

QuaternionD& QuaternionD::operator =(
        QuaternionD&& x) noexcept
{

    m_w = x.m_w;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    return *this;
}

bool QuaternionD::operator ==(
        const QuaternionD& x) const
{
    return (m_w == x.m_w &&
           m_x == x.m_x &&
           m_y == x.m_y &&
           m_z == x.m_z);
}

bool QuaternionD::operator !=(
        const QuaternionD& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member w
 * @param _w New value for member w
 */
void QuaternionD::w(
        double _w)
{
    m_w = _w;
}

/*!
 * @brief This function returns the value of member w
 * @return Value of member w
 */
double QuaternionD::w() const
{
    return m_w;
}

/*!
 * @brief This function returns a reference to member w
 * @return Reference to member w
 */
double& QuaternionD::w()
{
    return m_w;
}


/*!
 * @brief This function sets a value in member x
 * @param _x New value for member x
 */
void QuaternionD::x(
        double _x)
{
    m_x = _x;
}

/*!
 * @brief This function returns the value of member x
 * @return Value of member x
 */
double QuaternionD::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
double& QuaternionD::x()
{
    return m_x;
}


/*!
 * @brief This function sets a value in member y
 * @param _y New value for member y
 */
void QuaternionD::y(
        double _y)
{
    m_y = _y;
}

/*!
 * @brief This function returns the value of member y
 * @return Value of member y
 */
double QuaternionD::y() const
{
    return m_y;
}

/*!
 * @brief This function returns a reference to member y
 * @return Reference to member y
 */
double& QuaternionD::y()
{
    return m_y;
}


/*!
 * @brief This function sets a value in member z
 * @param _z New value for member z
 */
void QuaternionD::z(
        double _z)
{
    m_z = _z;
}

/*!
 * @brief This function returns the value of member z
 * @return Value of member z
 */
double QuaternionD::z() const
{
    return m_z;
}

/*!
 * @brief This function returns a reference to member z
 * @return Reference to member z
 */
double& QuaternionD::z()
{
    return m_z;
}




PoseStamped::PoseStamped()
{
}

PoseStamped::~PoseStamped()
{
}

PoseStamped::PoseStamped(
        const PoseStamped& x)
{
    m_frame_id = x.m_frame_id;
    m_position = x.m_position;
    m_quaternion = x.m_quaternion;
}

PoseStamped::PoseStamped(
        PoseStamped&& x) noexcept
{
    m_frame_id = std::move(x.m_frame_id);
    m_position = std::move(x.m_position);
    m_quaternion = std::move(x.m_quaternion);
}

PoseStamped& PoseStamped::operator =(
        const PoseStamped& x)
{

    m_frame_id = x.m_frame_id;
    m_position = x.m_position;
    m_quaternion = x.m_quaternion;
    return *this;
}

PoseStamped& PoseStamped::operator =(
        PoseStamped&& x) noexcept
{

    m_frame_id = std::move(x.m_frame_id);
    m_position = std::move(x.m_position);
    m_quaternion = std::move(x.m_quaternion);
    return *this;
}

bool PoseStamped::operator ==(
        const PoseStamped& x) const
{
    return (m_frame_id == x.m_frame_id &&
           m_position == x.m_position &&
           m_quaternion == x.m_quaternion);
}

bool PoseStamped::operator !=(
        const PoseStamped& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void PoseStamped::frame_id(
        const std::array<char, 50>& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void PoseStamped::frame_id(
        std::array<char, 50>&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::array<char, 50>& PoseStamped::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::array<char, 50>& PoseStamped::frame_id()
{
    return m_frame_id;
}


/*!
 * @brief This function copies the value in member position
 * @param _position New value to be copied in member position
 */
void PoseStamped::position(
        const Message::PointD& _position)
{
    m_position = _position;
}

/*!
 * @brief This function moves the value in member position
 * @param _position New value to be moved in member position
 */
void PoseStamped::position(
        Message::PointD&& _position)
{
    m_position = std::move(_position);
}

/*!
 * @brief This function returns a constant reference to member position
 * @return Constant reference to member position
 */
const Message::PointD& PoseStamped::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
Message::PointD& PoseStamped::position()
{
    return m_position;
}


/*!
 * @brief This function copies the value in member quaternion
 * @param _quaternion New value to be copied in member quaternion
 */
void PoseStamped::quaternion(
        const Message::QuaternionD& _quaternion)
{
    m_quaternion = _quaternion;
}

/*!
 * @brief This function moves the value in member quaternion
 * @param _quaternion New value to be moved in member quaternion
 */
void PoseStamped::quaternion(
        Message::QuaternionD&& _quaternion)
{
    m_quaternion = std::move(_quaternion);
}

/*!
 * @brief This function returns a constant reference to member quaternion
 * @return Constant reference to member quaternion
 */
const Message::QuaternionD& PoseStamped::quaternion() const
{
    return m_quaternion;
}

/*!
 * @brief This function returns a reference to member quaternion
 * @return Reference to member quaternion
 */
Message::QuaternionD& PoseStamped::quaternion()
{
    return m_quaternion;
}




Path1024::Path1024()
{
}

Path1024::~Path1024()
{
}

Path1024::Path1024(
        const Path1024& x)
{
    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_poses = x.m_poses;
    m_poses_size = x.m_poses_size;
}

Path1024::Path1024(
        Path1024&& x) noexcept
{
    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_poses = std::move(x.m_poses);
    m_poses_size = x.m_poses_size;
}

Path1024& Path1024::operator =(
        const Path1024& x)
{

    m_frame_id = x.m_frame_id;
    m_stamp = x.m_stamp;
    m_poses = x.m_poses;
    m_poses_size = x.m_poses_size;
    return *this;
}

Path1024& Path1024::operator =(
        Path1024&& x) noexcept
{

    m_frame_id = std::move(x.m_frame_id);
    m_stamp = x.m_stamp;
    m_poses = std::move(x.m_poses);
    m_poses_size = x.m_poses_size;
    return *this;
}

bool Path1024::operator ==(
        const Path1024& x) const
{
    return (m_frame_id == x.m_frame_id &&
           m_stamp == x.m_stamp &&
           m_poses == x.m_poses &&
           m_poses_size == x.m_poses_size);
}

bool Path1024::operator !=(
        const Path1024& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void Path1024::frame_id(
        const std::array<char, 50>& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void Path1024::frame_id(
        std::array<char, 50>&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::array<char, 50>& Path1024::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::array<char, 50>& Path1024::frame_id()
{
    return m_frame_id;
}


/*!
 * @brief This function sets a value in member stamp
 * @param _stamp New value for member stamp
 */
void Path1024::stamp(
        uint64_t _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function returns the value of member stamp
 * @return Value of member stamp
 */
uint64_t Path1024::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
uint64_t& Path1024::stamp()
{
    return m_stamp;
}


/*!
 * @brief This function copies the value in member poses
 * @param _poses New value to be copied in member poses
 */
void Path1024::poses(
        const std::array<Message::PoseStamped, 1024>& _poses)
{
    m_poses = _poses;
}

/*!
 * @brief This function moves the value in member poses
 * @param _poses New value to be moved in member poses
 */
void Path1024::poses(
        std::array<Message::PoseStamped, 1024>&& _poses)
{
    m_poses = std::move(_poses);
}

/*!
 * @brief This function returns a constant reference to member poses
 * @return Constant reference to member poses
 */
const std::array<Message::PoseStamped, 1024>& Path1024::poses() const
{
    return m_poses;
}

/*!
 * @brief This function returns a reference to member poses
 * @return Reference to member poses
 */
std::array<Message::PoseStamped, 1024>& Path1024::poses()
{
    return m_poses;
}


/*!
 * @brief This function sets a value in member poses_size
 * @param _poses_size New value for member poses_size
 */
void Path1024::poses_size(
        uint32_t _poses_size)
{
    m_poses_size = _poses_size;
}

/*!
 * @brief This function returns the value of member poses_size
 * @return Value of member poses_size
 */
uint32_t Path1024::poses_size() const
{
    return m_poses_size;
}

/*!
 * @brief This function returns a reference to member poses_size
 * @return Reference to member poses_size
 */
uint32_t& Path1024::poses_size()
{
    return m_poses_size;
}




} // namespace Message
// Include auxiliary functions like for serializing/deserializing.
#include "MessageCdrAux.ipp"

