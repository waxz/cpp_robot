// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MessagePubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastddsgen.
 */


#ifndef _FAST_DDS_GENERATED_MESSAGE_MESSAGE_PUBSUBTYPES_H_
#define _FAST_DDS_GENERATED_MESSAGE_MESSAGE_PUBSUBTYPES_H_

#include <fastdds/dds/core/policy/QosPolicies.hpp>
#include <fastdds/dds/topic/TopicDataType.hpp>
#include <fastdds/rtps/common/InstanceHandle.h>
#include <fastdds/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>

#include "Message.h"


#if !defined(GEN_API_VER) || (GEN_API_VER != 2)
#error \
    Generated Message is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif  // GEN_API_VER

namespace Message
{



    #ifndef SWIG
    namespace detail {

    template<typename Tag, typename Tag::type M>
    struct Request_rob
    {
        friend constexpr typename Tag::type get(
                Tag)
        {
            return M;
        }

    };

    struct Request_f
    {
        typedef std::array<char, 50> Request::* type;
        friend constexpr type get(
                Request_f);
    };

    template struct Request_rob<Request_f, &Request::m_data>;

    template <typename T, typename Tag>
    inline size_t constexpr Request_offset_of()
    {
        return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
    }

    } // namespace detail
    #endif // ifndef SWIG


    /*!
     * @brief This class represents the TopicDataType of the type Request defined by the user in the IDL file.
     * @ingroup Message
     */
    class RequestPubSubType : public eprosima::fastdds::dds::TopicDataType
    {
    public:

        typedef Request type;

        eProsima_user_DllExport RequestPubSubType();

        eProsima_user_DllExport ~RequestPubSubType() override;

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
        {
            return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool deserialize(
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                void* data) override;

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data) override
        {
            return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool getKey(
                void* data,
                eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                bool force_md5 = false) override;

        eProsima_user_DllExport void* createData() override;

        eProsima_user_DllExport void deleteData(
                void* data) override;

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
        eProsima_user_DllExport inline bool is_bounded() const override
        {
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
        eProsima_user_DllExport inline bool is_plain() const override
        {
            return is_plain_xcdrv1_impl();
        }

        eProsima_user_DllExport inline bool is_plain(
            eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
        {
            if(data_representation == eprosima::fastdds::dds::DataRepresentationId_t::XCDR2_DATA_REPRESENTATION)
            {
                return is_plain_xcdrv2_impl();
            }
            else
            {
                return is_plain_xcdrv1_impl();
            }
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

    #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
        eProsima_user_DllExport inline bool construct_sample(
                void* memory) const override
        {
            new (memory) Request();
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

        MD5 m_md5;
        unsigned char* m_keyBuffer;

    private:

        static constexpr bool is_plain_xcdrv1_impl()
        {
            return 58ULL ==
                   (detail::Request_offset_of<Request, detail::Request_f>() +
                   sizeof(std::array<char, 50>));
        }

        static constexpr bool is_plain_xcdrv2_impl()
        {
            return 58ULL ==
                   (detail::Request_offset_of<Request, detail::Request_f>() +
                   sizeof(std::array<char, 50>));
        }

    };



    #ifndef SWIG
    namespace detail {

    template<typename Tag, typename Tag::type M>
    struct Pointcloud1200x800x4_rob
    {
        friend constexpr typename Tag::type get(
                Tag)
        {
            return M;
        }

    };

    struct Pointcloud1200x800x4_f
    {
        typedef std::array<float, 1200*800*4> Pointcloud1200x800x4::* type;
        friend constexpr type get(
                Pointcloud1200x800x4_f);
    };

    template struct Pointcloud1200x800x4_rob<Pointcloud1200x800x4_f, &Pointcloud1200x800x4::m_data>;

    template <typename T, typename Tag>
    inline size_t constexpr Pointcloud1200x800x4_offset_of()
    {
        return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
    }

    } // namespace detail
    #endif // ifndef SWIG


    /*!
     * @brief This class represents the TopicDataType of the type Pointcloud1200x800x4 defined by the user in the IDL file.
     * @ingroup Message
     */
    class Pointcloud1200x800x4PubSubType : public eprosima::fastdds::dds::TopicDataType
    {
    public:

        typedef Pointcloud1200x800x4 type;

        eProsima_user_DllExport Pointcloud1200x800x4PubSubType();

        eProsima_user_DllExport ~Pointcloud1200x800x4PubSubType() override;

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
        {
            return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool deserialize(
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                void* data) override;

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data) override
        {
            return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool getKey(
                void* data,
                eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                bool force_md5 = false) override;

        eProsima_user_DllExport void* createData() override;

        eProsima_user_DllExport void deleteData(
                void* data) override;

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
        eProsima_user_DllExport inline bool is_bounded() const override
        {
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
        eProsima_user_DllExport inline bool is_plain() const override
        {
            return is_plain_xcdrv1_impl();
        }

        eProsima_user_DllExport inline bool is_plain(
            eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
        {
            if(data_representation == eprosima::fastdds::dds::DataRepresentationId_t::XCDR2_DATA_REPRESENTATION)
            {
                return is_plain_xcdrv2_impl();
            }
            else
            {
                return is_plain_xcdrv1_impl();
            }
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

    #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
        eProsima_user_DllExport inline bool construct_sample(
                void* memory) const override
        {
            new (memory) Pointcloud1200x800x4();
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

        MD5 m_md5;
        unsigned char* m_keyBuffer;

    private:

        static constexpr bool is_plain_xcdrv1_impl()
        {
            return 15360076ULL ==
                   (detail::Pointcloud1200x800x4_offset_of<Pointcloud1200x800x4, detail::Pointcloud1200x800x4_f>() +
                   sizeof(std::array<float, 1200*800*4>));
        }

        static constexpr bool is_plain_xcdrv2_impl()
        {
            return 15360072ULL ==
                   (detail::Pointcloud1200x800x4_offset_of<Pointcloud1200x800x4, detail::Pointcloud1200x800x4_f>() +
                   sizeof(std::array<float, 1200*800*4>));
        }

    };



    #ifndef SWIG
    namespace detail {

    template<typename Tag, typename Tag::type M>
    struct Pointcloud640x480x3_rob
    {
        friend constexpr typename Tag::type get(
                Tag)
        {
            return M;
        }

    };

    struct Pointcloud640x480x3_f
    {
        typedef std::array<float, 640*480*3> Pointcloud640x480x3::* type;
        friend constexpr type get(
                Pointcloud640x480x3_f);
    };

    template struct Pointcloud640x480x3_rob<Pointcloud640x480x3_f, &Pointcloud640x480x3::m_data>;

    template <typename T, typename Tag>
    inline size_t constexpr Pointcloud640x480x3_offset_of()
    {
        return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
    }

    } // namespace detail
    #endif // ifndef SWIG


    /*!
     * @brief This class represents the TopicDataType of the type Pointcloud640x480x3 defined by the user in the IDL file.
     * @ingroup Message
     */
    class Pointcloud640x480x3PubSubType : public eprosima::fastdds::dds::TopicDataType
    {
    public:

        typedef Pointcloud640x480x3 type;

        eProsima_user_DllExport Pointcloud640x480x3PubSubType();

        eProsima_user_DllExport ~Pointcloud640x480x3PubSubType() override;

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
        {
            return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool deserialize(
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                void* data) override;

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data) override
        {
            return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool getKey(
                void* data,
                eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                bool force_md5 = false) override;

        eProsima_user_DllExport void* createData() override;

        eProsima_user_DllExport void deleteData(
                void* data) override;

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
        eProsima_user_DllExport inline bool is_bounded() const override
        {
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
        eProsima_user_DllExport inline bool is_plain() const override
        {
            return is_plain_xcdrv1_impl();
        }

        eProsima_user_DllExport inline bool is_plain(
            eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
        {
            if(data_representation == eprosima::fastdds::dds::DataRepresentationId_t::XCDR2_DATA_REPRESENTATION)
            {
                return is_plain_xcdrv2_impl();
            }
            else
            {
                return is_plain_xcdrv1_impl();
            }
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

    #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
        eProsima_user_DllExport inline bool construct_sample(
                void* memory) const override
        {
            new (memory) Pointcloud640x480x3();
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

        MD5 m_md5;
        unsigned char* m_keyBuffer;

    private:

        static constexpr bool is_plain_xcdrv1_impl()
        {
            return 3686476ULL ==
                   (detail::Pointcloud640x480x3_offset_of<Pointcloud640x480x3, detail::Pointcloud640x480x3_f>() +
                   sizeof(std::array<float, 640*480*3>));
        }

        static constexpr bool is_plain_xcdrv2_impl()
        {
            return 3686472ULL ==
                   (detail::Pointcloud640x480x3_offset_of<Pointcloud640x480x3, detail::Pointcloud640x480x3_f>() +
                   sizeof(std::array<float, 640*480*3>));
        }

    };



    #ifndef SWIG
    namespace detail {

    template<typename Tag, typename Tag::type M>
    struct Pointcloud1920x1080x3_rob
    {
        friend constexpr typename Tag::type get(
                Tag)
        {
            return M;
        }

    };

    struct Pointcloud1920x1080x3_f
    {
        typedef std::array<float, 1920*1080*3> Pointcloud1920x1080x3::* type;
        friend constexpr type get(
                Pointcloud1920x1080x3_f);
    };

    template struct Pointcloud1920x1080x3_rob<Pointcloud1920x1080x3_f, &Pointcloud1920x1080x3::m_data>;

    template <typename T, typename Tag>
    inline size_t constexpr Pointcloud1920x1080x3_offset_of()
    {
        return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
    }

    } // namespace detail
    #endif // ifndef SWIG


    /*!
     * @brief This class represents the TopicDataType of the type Pointcloud1920x1080x3 defined by the user in the IDL file.
     * @ingroup Message
     */
    class Pointcloud1920x1080x3PubSubType : public eprosima::fastdds::dds::TopicDataType
    {
    public:

        typedef Pointcloud1920x1080x3 type;

        eProsima_user_DllExport Pointcloud1920x1080x3PubSubType();

        eProsima_user_DllExport ~Pointcloud1920x1080x3PubSubType() override;

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
        {
            return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool deserialize(
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                void* data) override;

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data) override
        {
            return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool getKey(
                void* data,
                eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                bool force_md5 = false) override;

        eProsima_user_DllExport void* createData() override;

        eProsima_user_DllExport void deleteData(
                void* data) override;

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
        eProsima_user_DllExport inline bool is_bounded() const override
        {
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
        eProsima_user_DllExport inline bool is_plain() const override
        {
            return is_plain_xcdrv1_impl();
        }

        eProsima_user_DllExport inline bool is_plain(
            eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
        {
            if(data_representation == eprosima::fastdds::dds::DataRepresentationId_t::XCDR2_DATA_REPRESENTATION)
            {
                return is_plain_xcdrv2_impl();
            }
            else
            {
                return is_plain_xcdrv1_impl();
            }
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

    #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
        eProsima_user_DllExport inline bool construct_sample(
                void* memory) const override
        {
            new (memory) Pointcloud1920x1080x3();
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

        MD5 m_md5;
        unsigned char* m_keyBuffer;

    private:

        static constexpr bool is_plain_xcdrv1_impl()
        {
            return 24883276ULL ==
                   (detail::Pointcloud1920x1080x3_offset_of<Pointcloud1920x1080x3, detail::Pointcloud1920x1080x3_f>() +
                   sizeof(std::array<float, 1920*1080*3>));
        }

        static constexpr bool is_plain_xcdrv2_impl()
        {
            return 24883272ULL ==
                   (detail::Pointcloud1920x1080x3_offset_of<Pointcloud1920x1080x3, detail::Pointcloud1920x1080x3_f>() +
                   sizeof(std::array<float, 1920*1080*3>));
        }

    };



    #ifndef SWIG
    namespace detail {

    template<typename Tag, typename Tag::type M>
    struct Laserscan1500_rob
    {
        friend constexpr typename Tag::type get(
                Tag)
        {
            return M;
        }

    };

    struct Laserscan1500_f
    {
        typedef std::array<float, 1500> Laserscan1500::* type;
        friend constexpr type get(
                Laserscan1500_f);
    };

    template struct Laserscan1500_rob<Laserscan1500_f, &Laserscan1500::m_intensities>;

    template <typename T, typename Tag>
    inline size_t constexpr Laserscan1500_offset_of()
    {
        return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
    }

    } // namespace detail
    #endif // ifndef SWIG


    /*!
     * @brief This class represents the TopicDataType of the type Laserscan1500 defined by the user in the IDL file.
     * @ingroup Message
     */
    class Laserscan1500PubSubType : public eprosima::fastdds::dds::TopicDataType
    {
    public:

        typedef Laserscan1500 type;

        eProsima_user_DllExport Laserscan1500PubSubType();

        eProsima_user_DllExport ~Laserscan1500PubSubType() override;

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
        {
            return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool deserialize(
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                void* data) override;

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data) override
        {
            return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool getKey(
                void* data,
                eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                bool force_md5 = false) override;

        eProsima_user_DllExport void* createData() override;

        eProsima_user_DllExport void deleteData(
                void* data) override;

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
        eProsima_user_DllExport inline bool is_bounded() const override
        {
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
        eProsima_user_DllExport inline bool is_plain() const override
        {
            return is_plain_xcdrv1_impl();
        }

        eProsima_user_DllExport inline bool is_plain(
            eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
        {
            if(data_representation == eprosima::fastdds::dds::DataRepresentationId_t::XCDR2_DATA_REPRESENTATION)
            {
                return is_plain_xcdrv2_impl();
            }
            else
            {
                return is_plain_xcdrv1_impl();
            }
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

    #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
        eProsima_user_DllExport inline bool construct_sample(
                void* memory) const override
        {
            new (memory) Laserscan1500();
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

        MD5 m_md5;
        unsigned char* m_keyBuffer;

    private:

        static constexpr bool is_plain_xcdrv1_impl()
        {
            return 12088ULL ==
                   (detail::Laserscan1500_offset_of<Laserscan1500, detail::Laserscan1500_f>() +
                   sizeof(std::array<float, 1500>));
        }

        static constexpr bool is_plain_xcdrv2_impl()
        {
            return 12084ULL ==
                   (detail::Laserscan1500_offset_of<Laserscan1500, detail::Laserscan1500_f>() +
                   sizeof(std::array<float, 1500>));
        }

    };



    #ifndef SWIG
    namespace detail {

    template<typename Tag, typename Tag::type M>
    struct Scalar_rob
    {
        friend constexpr typename Tag::type get(
                Tag)
        {
            return M;
        }

    };

    struct Scalar_f
    {
        typedef float Scalar::* type;
        friend constexpr type get(
                Scalar_f);
    };

    template struct Scalar_rob<Scalar_f, &Scalar::m_value>;

    template <typename T, typename Tag>
    inline size_t constexpr Scalar_offset_of()
    {
        return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
    }

    } // namespace detail
    #endif // ifndef SWIG


    /*!
     * @brief This class represents the TopicDataType of the type Scalar defined by the user in the IDL file.
     * @ingroup Message
     */
    class ScalarPubSubType : public eprosima::fastdds::dds::TopicDataType
    {
    public:

        typedef Scalar type;

        eProsima_user_DllExport ScalarPubSubType();

        eProsima_user_DllExport ~ScalarPubSubType() override;

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
        {
            return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool deserialize(
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                void* data) override;

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data) override
        {
            return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool getKey(
                void* data,
                eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                bool force_md5 = false) override;

        eProsima_user_DllExport void* createData() override;

        eProsima_user_DllExport void deleteData(
                void* data) override;

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
        eProsima_user_DllExport inline bool is_bounded() const override
        {
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
        eProsima_user_DllExport inline bool is_plain() const override
        {
            return is_plain_xcdrv1_impl();
        }

        eProsima_user_DllExport inline bool is_plain(
            eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
        {
            if(data_representation == eprosima::fastdds::dds::DataRepresentationId_t::XCDR2_DATA_REPRESENTATION)
            {
                return is_plain_xcdrv2_impl();
            }
            else
            {
                return is_plain_xcdrv1_impl();
            }
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

    #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
        eProsima_user_DllExport inline bool construct_sample(
                void* memory) const override
        {
            new (memory) Scalar();
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

        MD5 m_md5;
        unsigned char* m_keyBuffer;

    private:

        static constexpr bool is_plain_xcdrv1_impl()
        {
            return 64ULL ==
                   (detail::Scalar_offset_of<Scalar, detail::Scalar_f>() +
                   sizeof(float));
        }

        static constexpr bool is_plain_xcdrv2_impl()
        {
            return 64ULL ==
                   (detail::Scalar_offset_of<Scalar, detail::Scalar_f>() +
                   sizeof(float));
        }

    };



    #ifndef SWIG
    namespace detail {

    template<typename Tag, typename Tag::type M>
    struct ScalarList20_rob
    {
        friend constexpr typename Tag::type get(
                Tag)
        {
            return M;
        }

    };

    struct ScalarList20_f
    {
        typedef std::array<Message::Scalar, 20> ScalarList20::* type;
        friend constexpr type get(
                ScalarList20_f);
    };

    template struct ScalarList20_rob<ScalarList20_f, &ScalarList20::m_data>;

    template <typename T, typename Tag>
    inline size_t constexpr ScalarList20_offset_of()
    {
        return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
    }

    } // namespace detail
    #endif // ifndef SWIG


    /*!
     * @brief This class represents the TopicDataType of the type ScalarList20 defined by the user in the IDL file.
     * @ingroup Message
     */
    class ScalarList20PubSubType : public eprosima::fastdds::dds::TopicDataType
    {
    public:

        typedef ScalarList20 type;

        eProsima_user_DllExport ScalarList20PubSubType();

        eProsima_user_DllExport ~ScalarList20PubSubType() override;

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
        {
            return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool deserialize(
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                void* data) override;

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data) override
        {
            return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
        }

        eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                void* data,
                eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

        eProsima_user_DllExport bool getKey(
                void* data,
                eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                bool force_md5 = false) override;

        eProsima_user_DllExport void* createData() override;

        eProsima_user_DllExport void deleteData(
                void* data) override;

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
        eProsima_user_DllExport inline bool is_bounded() const override
        {
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
        eProsima_user_DllExport inline bool is_plain() const override
        {
            return is_plain_xcdrv1_impl();
        }

        eProsima_user_DllExport inline bool is_plain(
            eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
        {
            if(data_representation == eprosima::fastdds::dds::DataRepresentationId_t::XCDR2_DATA_REPRESENTATION)
            {
                return is_plain_xcdrv2_impl();
            }
            else
            {
                return is_plain_xcdrv1_impl();
            }
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

    #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
        eProsima_user_DllExport inline bool construct_sample(
                void* memory) const override
        {
            new (memory) ScalarList20();
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

        MD5 m_md5;
        unsigned char* m_keyBuffer;

    private:

        static constexpr bool is_plain_xcdrv1_impl()
        {
            return 1280ULL ==
                   (detail::ScalarList20_offset_of<ScalarList20, detail::ScalarList20_f>() +
                   sizeof(std::array<Message::Scalar, 20>));
        }

        static constexpr bool is_plain_xcdrv2_impl()
        {
            return 1280ULL ==
                   (detail::ScalarList20_offset_of<ScalarList20, detail::ScalarList20_f>() +
                   sizeof(std::array<Message::Scalar, 20>));
        }

    };
}

#endif // _FAST_DDS_GENERATED_MESSAGE_MESSAGE_PUBSUBTYPES_H_

